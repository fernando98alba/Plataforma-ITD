<%= turbo_frame_tag "maturity_graph" do %>
  <div>
    <canvas id="myChart2" height="200px"></canvas>
  </div>

  <script>
    ctx2 = document.getElementById('myChart2');

    data = {
          labels: [0,10,20,40],
          datasets: [
          { 
            label: 'Puntaje Último ITD',
            type: "scatter",
            data: [{
              y: <%= itdcon.alignment_score.round %>,
              x: <%= itdcon.maturity_score.round %>
            }],
            backgroundColor: "red",
            borderColor:'red'
          },
          {
            label: 'Rezagado Digital',
            type: "line",
            data: [30, 30, 30, 30],
            backgroundColor: 'rgba(0, 0, 50, 0.2)',
            borderColor:'rgba(0, 0, 0, 0)',
            borderWidth: 1,
            pointRadius: 0,
            fill: "origin"
          },
          {
            label: 'Explorador Digital',
            type: "line",
            data: [55, 55, 55, 55],
            backgroundColor: 'rgba(0, 50, 0, 0.2)',
            borderColor:'rgba(0, 0, 0, 0)',
            borderWidth: 1,
            pointRadius: 0,
            fill: 1
          },
          {
            label: 'Adoptador Digital',
            type: "line",
            data: [75, 75, 75, 75],
            backgroundColor: 'rgba(50, 0, 0, 0.2)',
            borderColor:'rgba(0, 0, 0, 0)',
            borderWidth: 1,
            pointRadius: 0,
            fill: 1
          },
          {
            label: 'Líder Digital',
            type: "line",
            data: [90, 90, 90, 90],
            backgroundColor: 'rgba(0, 50, 50, 0.2)',
            borderColor:'rgba(1, 0, 0, 0)',
            borderWidth: 1,
            pointRadius: 0,
            fill: 1
          },
          {
            label: 'Disruptor Digital',
            type: "line",
            data: [100, 100, 100, 100],
            backgroundColor: 'rgba(50, 0, 50, 0.2)',
            borderColor:'rgba(1, 0, 0, 0)',
            borderWidth: 1,
            pointRadius: 0,
            fill: 1
          },
          ]
        };
        <% if recomendation_mat["maturity_score"] > itdcon.maturity_score.to_i or (recomendation_mat["alignment_score"] < itdcon.alignment_score.to_i and recomendation_mat["alignment_score"] > 0) %>
          data.datasets.push(
            { 
              label: 'Aspiración',
              type: "scatter",
              data: [{
                y: <%= recomendation_mat["alignment_score"] %>,
                x: <%= recomendation_mat["maturity_score"] %>
              }],
              backgroundColor: "black",
              borderColor:'black'
            }
          );
        <%end%>
        // render init block
        myChart = new Chart(
          document.getElementById('myChart2').getContext('2d'),
          {
            data,
            options: {
              plugins: {
                maintainAspectRatio: false,
                legend: {
                  onClick: null,
                  labels: {
                      filter: (legendItem, data) => {
                          return legendItem.text == null || !legendItem.text.includes('Digital');
                      }
                  }
                }
              },
              indexAxis: 'y',
              scales: {
                x: {
                  ticks: {
                    count: 101,
                    callback: (value, index, values ) => {
                      if ([0,30,55,75,90,100].includes(value)) {
                        return value
                      };
                      if (value == 15) {
                        return "Rezagado Digital"
                      };
                      if (value == 42) {
                        return "Explorador Digital"
                      };
                      
                      if (value == 65) {
                        return "Adoptador Digital"
                      };
                      
                      if (value == 82) {
                        return "Líder Digital"
                      };
                      
                      if (value == 95) {
                        return "Disruptor Digital"
                      };
                    }
                  },
                  grid: {
                    color: function(context) {
                      let response = [];
                      for (i = 0; i < context.scale.ticks.length; i++) {
                        if (i == context.index) {
                          if (Number.isInteger(context.scale.ticks[i].label)) {
                            return "rgba(0, 0, 0, 0.2)"
                          } else {
                            return false
                          }
                        }
                      };
                    }
                  },
                  min: 0, 
                  max: 100,
                  stacked: false,
                },
                y: {
                  ticks: {
                    count: 9,
                    callback: (value, index, values ) => {
                      if ([0,10,20,40].includes(value)) {
                        return value
                      };
                      if (value == 5) {
                        return "Balance"
                      };
                      if (value == 15) {
                        return "Desbalance"
                      };
                      if (value == 30) {
                        return "Desalineamiento"
                      };
                    }
                  },
                  grid: {
                    color: function(context) {
                      let response = [];
                      for (i = 0; i < context.scale.ticks.length; i++) {
                        if (i == context.index) {
                          if (Number.isInteger(context.scale.ticks[i].label)) {
                            return "rgba(0, 0, 0, 0.2)"
                          } else {
                            return false
                          }
                        }
                      };
                    }
                  },
                  reverse: true
                }
              },
              onClick: (e) => {

                // Substitute the appropriate scale IDs
                const dataX = myChart.scales.x.getValueForPixel(e.x);
                const dataY = myChart.scales.y.getValueForPixel(e.y);
                console.log(dataX);
                console.log(dataY);
              
              }
            },
          }
        );
    </script>
      
<% end %>