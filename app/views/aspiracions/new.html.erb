<div class="container-fluid">
  <div class="main">
    <div class="shadow p-3 mb-5 bg-white rounded">  
      <div class="row">
        <h3><b>Aspiración de madurez y alineamiento</b></h3> 
        <p> Presione en el gráfico para definir la aspiración</p>
        <div class="col-xl-7 col-lg-7 col-md-7 col-sm-12 col-xs-12 "> 
          <div>
            <canvas id="myChart2"></canvas>
          </div>

          <script>
            var ctx2 = document.getElementById('myChart2');

            const arbitratyLine = {
              id: 'arbitratyLine',
              beforeDraw(chart, args, options){
                const { ctx2, charArea: { top, right, bottom, left, width, height }, scales: {x,y}
              } = chart;
              ctx2.save();
              ctx2.strokeStyle = "green";
              ctx2.strokeRect(x.getPixelForValue(2), top, 0, height);
              ctx2.restore();
            }};

            const data = {
                  labels: [0, 50],
                  datasets: [
                  { 
                    label: 'Puntaje ITD',
                    type: "scatter",
                    data: [{
                      y: <%= @itdcon.alignment %>,
                      x: <%= @itdcon.maturity %>
                    }],
                    backgroundColor: "red",
                    borderColor:'red'
                  },
                  {
                    label: 'Rezagado',
                    data: [0, 0],
                    backgroundColor: 'rgba(0, 0, 50, 0.2)',
                    borderColor:'rgba(0, 0, 0, 0)',
                    borderWidth: 1,
                    fill: 1
                  },
                  {
                    label: 'Explorador Digital',
                    data: [30, 30],
                    backgroundColor: 'rgba(0, 0, 50, 0.3)',
                    borderColor:'rgba(0, 0, 0, 0)',
                    borderWidth: 1,
                    fill: 1
                  },
                  {
                    label: 'Adoptador Digital',
                    data: [25, 25],
                    backgroundColor: 'rgba(0, 0, 50, 0.2)',
                    borderColor:'rgba(0, 0, 0, 0)',
                    borderWidth: 1,
                    fill: 1
                  },
                  {
                    label: 'Líder Digital',
                    data: [20, 20],
                    backgroundColor: 'rgba(0, 0, 50, 0.3)',
                    borderColor:'rgba(1, 0, 0, 0)',
                    borderWidth: 1,
                    fill: 1
                  },
                  {
                    label: 'Disruptor Digital',
                    data: [15, 15],
                    backgroundColor: 'rgba(0, 0, 50, 0.3)',
                    borderColor:'rgba(1, 0, 0, 0)',
                    borderWidth: 1,
                    fill: 1
                  },
                  {
                    label: 'Disruptor Digital',
                    data: [10, 10],
                    backgroundColor: 'rgba(0, 0, 50, 0.3)',
                    borderColor:'rgba(0, 0, 0, 0)',
                    borderWidth: 1,
                    fill: 1
                  }
                  ]
                };

                // render init block
                var myChart = new Chart(
                  document.getElementById('myChart2').getContext('2d'),
                  {
                    type: 'line',
                    labels: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
                    data,
                    options: {
                      indexAxis: 'y',
                      scales: {
                        x: {
                          stacked: true,
                          beginAtZero: true,
                        }
                      },
                      onClick: (e) => {

                        // Substitute the appropriate scale IDs
                        const dataX = myChart.scales.x.getValueForPixel(e.x);
                        const dataY = myChart.scales.y.getValueForPixel(e.y);
                        console.log(dataX);
                        console.log(dataY);
                      }
                    },
                  }
                );
            </script>
          </div>

          <div class="col-xl-5 col-lg-5 col-md-5 col-sm-12 col-xs-12" style="margin-bottom: 30px">
            <h3>Eres un <b>Adoptador Digital</b></h3>
            <p> Madurez
          </div>
        </div>
      </div>

    <div class="shadow p-3 mb-5 bg-white rounded">
      <div class="row">
        <div class="col-xl-3 col-lg-3 col-md-3 col-sm-12 col-xs-12 ">
          <h1>Nueva Aspiracion</h1>

          <%= render "form", empresa: @empresa, aspiracion: @aspiracion %>

          <br>

        </div>

        <div class="col-xl-9 col-lg-9 col-md-9 col-sm-12 col-xs-12 ">
          <div>
            <canvas id="myChart"></canvas>
          </div>
          <%recomendation = {}%>
          <% @points_dat.keys.each do |dat|%>
            <% if @points_dat[dat] < @itdcon.maturity%>
              <%recomendation[dat] = @itdcon.maturity - @points_dat[dat]%>
            <%else%>
              <%recomendation[dat] = 0%>
            <%end%>
          <%end%>

          <script>
            let label = [];
            let values = [];
            let maturity = [] ;
            let recomendation = [];
            <% @points_dat.keys.each do |dat|%>
              label.push("Capital <%= dat %>");
              values.push(<%= @points_dat[dat]%>);
              maturity.push(<%= @itdcon.maturity%>);
              recomendation.push(<%= recomendation[dat]%>);
            <%end%>
            const ctx = document.getElementById('myChart');
            new Chart(ctx, {
              data: {
              labels: label,
              datasets: [{
                label: 'Puntaje por capital',
                type: 'bar',
                data: values,
                fill: true,
              },
              {
                label: 'Meta Umbral (Aún por definir limites)',
                type: 'line',
                data: maturity,
              },
              {
                label: 'Meta',
                type: 'bar',
                labels: [' ', 'Capital Estrategico','Capital Estructural','Capital Humano','Capital Relacional','Capital Natural', ' '],
                data: recomendation,
              }]
              },
              options: {
                x: {
                  stacked: true
                },
                y: {
                  stacked: true,
                  beginAtZero: true,
                  reverse: true
                },
                elements: {
                  line: {
                    borderWidth: 3

                  }
                }
              },
            });             
          </script>
        </div>
        <div>
          <div class="col-xl-12 col-lg-12 col-md-12 col-sm-12 col-xs-12 ">
              <h3 class="text-center">El puntaje de madurez es <b><%= @itdcon.maturity.to_i %></b></h3>
              <h3 class="text-center">El alineamiento es  <b><%= @itdcon.alignment.to_i %></b></h3>
              <b> Los capitales bajo el umbral son:</b>
              <% @points_dat.keys().each do |dat|%>
              <div>
              <%if recomendation[dat] > 0 %>
                <%= " - Te recomendamos subir el Capital #{dat} en #{recomendation[dat].to_i}" %>
              <% end %>
              </div>
              <% end %>
              </div>
            </div>
          </div>
        </div>

      </div>
    </div>
  </div>
</div>

